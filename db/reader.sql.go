// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: reader.sql

package db

import (
	"context"
	"encoding/json"
)

const getChain = `-- name: GetChain :one
SELECT num, chain_id FROM chain WHERE chain_id=$1
`

func (q *Queries) GetChain(ctx context.Context, chainID string) (Chain, error) {
	row := q.db.QueryRowContext(ctx, getChain, chainID)
	var i Chain
	err := row.Scan(&i.Num, &i.ChainID)
	return i, err
}

const getChainMsgEventAttrs = `-- name: GetChainMsgEventAttrs :many
SELECT chain_num, block_height, tx_idx, msg_idx, type, key, value, value_hash FROM msg_event_attr WHERE chain_num=$1 AND block_height=$2 AND tx_idx=$3 AND msg_idx=$4
`

type GetChainMsgEventAttrsParams struct {
	ChainNum    int16
	BlockHeight int64
	TxIdx       int16
	MsgIdx      int16
}

func (q *Queries) GetChainMsgEventAttrs(ctx context.Context, arg GetChainMsgEventAttrsParams) ([]MsgEventAttr, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgEventAttrs,
		arg.ChainNum,
		arg.BlockHeight,
		arg.TxIdx,
		arg.MsgIdx,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MsgEventAttr
	for rows.Next() {
		var i MsgEventAttr
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Type,
			&i.Key,
			&i.Value,
			&i.ValueHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgEventExecByMsg = `-- name: GetChainMsgEventExecByMsg :many
SELECT chain_num, block_height, tx_idx, msg_idx, type FROM msg_event
WHERE chain_num=$1
AND block_height=$2
AND tx_idx=$3
AND msg_idx=$4
AND type='cosmos.group.v1.EventExec'
`

type GetChainMsgEventExecByMsgParams struct {
	ChainNum    int16
	BlockHeight int64
	TxIdx       int16
	MsgIdx      int16
}

func (q *Queries) GetChainMsgEventExecByMsg(ctx context.Context, arg GetChainMsgEventExecByMsgParams) ([]MsgEvent, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgEventExecByMsg,
		arg.ChainNum,
		arg.BlockHeight,
		arg.TxIdx,
		arg.MsgIdx,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MsgEvent
	for rows.Next() {
		var i MsgEvent
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgEventSubmitProposalByMsg = `-- name: GetChainMsgEventSubmitProposalByMsg :many
SELECT chain_num, block_height, tx_idx, msg_idx, type FROM msg_event
WHERE chain_num=$1
AND block_height=$2
AND tx_idx=$3
AND msg_idx=$4
AND type='cosmos.group.v1.EventSubmitProposal'
`

type GetChainMsgEventSubmitProposalByMsgParams struct {
	ChainNum    int16
	BlockHeight int64
	TxIdx       int16
	MsgIdx      int16
}

func (q *Queries) GetChainMsgEventSubmitProposalByMsg(ctx context.Context, arg GetChainMsgEventSubmitProposalByMsgParams) ([]MsgEvent, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgEventSubmitProposalByMsg,
		arg.ChainNum,
		arg.BlockHeight,
		arg.TxIdx,
		arg.MsgIdx,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MsgEvent
	for rows.Next() {
		var i MsgEvent
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgEvents = `-- name: GetChainMsgEvents :many
SELECT chain_num, block_height, tx_idx, msg_idx, type FROM msg_event WHERE chain_num=$1 ORDER BY block_height,tx_idx,msg_idx
`

func (q *Queries) GetChainMsgEvents(ctx context.Context, chainNum int16) ([]MsgEvent, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgEvents, chainNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MsgEvent
	for rows.Next() {
		var i MsgEvent
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgEventsByType = `-- name: GetChainMsgEventsByType :many
SELECT chain_num, block_height, tx_idx, msg_idx, type FROM msg_event WHERE chain_num=$1 AND type=$2 ORDER BY block_height,tx_idx,msg_idx
`

type GetChainMsgEventsByTypeParams struct {
	ChainNum int16
	Type     string
}

func (q *Queries) GetChainMsgEventsByType(ctx context.Context, arg GetChainMsgEventsByTypeParams) ([]MsgEvent, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgEventsByType, arg.ChainNum, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MsgEvent
	for rows.Next() {
		var i MsgEvent
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgExecByProposal = `-- name: GetChainMsgExecByProposal :many
SELECT chain_num, block_height, tx_idx, msg_idx, data FROM msg
WHERE chain_num=$1
AND data->>'@type'='/cosmos.group.v1.MsgExec'
AND data->>'proposal_id'=$2
ORDER BY block_height,tx_idx,msg_idx
`

type GetChainMsgExecByProposalParams struct {
	ChainNum int16
	Data     json.RawMessage
}

func (q *Queries) GetChainMsgExecByProposal(ctx context.Context, arg GetChainMsgExecByProposalParams) ([]Msg, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgExecByProposal, arg.ChainNum, arg.Data)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Msg
	for rows.Next() {
		var i Msg
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgSubmitProposalByPolicy = `-- name: GetChainMsgSubmitProposalByPolicy :many
SELECT chain_num, block_height, tx_idx, msg_idx, data FROM msg
WHERE chain_num=$1
AND data->>'@type'='/cosmos.group.v1.MsgSubmitProposal'
AND data->>'group_policy_address'=$2
ORDER BY block_height,tx_idx,msg_idx
`

type GetChainMsgSubmitProposalByPolicyParams struct {
	ChainNum int16
	Data     json.RawMessage
}

func (q *Queries) GetChainMsgSubmitProposalByPolicy(ctx context.Context, arg GetChainMsgSubmitProposalByPolicyParams) ([]Msg, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgSubmitProposalByPolicy, arg.ChainNum, arg.Data)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Msg
	for rows.Next() {
		var i Msg
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgs = `-- name: GetChainMsgs :many
SELECT chain_num, block_height, tx_idx, msg_idx, data FROM msg WHERE chain_num=$1 ORDER BY block_height,tx_idx,msg_idx
`

func (q *Queries) GetChainMsgs(ctx context.Context, chainNum int16) ([]Msg, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgs, chainNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Msg
	for rows.Next() {
		var i Msg
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainMsgsByType = `-- name: GetChainMsgsByType :many
SELECT chain_num, block_height, tx_idx, msg_idx, data FROM msg WHERE chain_num=$1 AND data->>'@type'=$2 ORDER BY block_height,tx_idx,msg_idx
`

type GetChainMsgsByTypeParams struct {
	ChainNum int16
	Data     json.RawMessage
}

func (q *Queries) GetChainMsgsByType(ctx context.Context, arg GetChainMsgsByTypeParams) ([]Msg, error) {
	rows, err := q.db.QueryContext(ctx, getChainMsgsByType, arg.ChainNum, arg.Data)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Msg
	for rows.Next() {
		var i Msg
		if err := rows.Scan(
			&i.ChainNum,
			&i.BlockHeight,
			&i.TxIdx,
			&i.MsgIdx,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
